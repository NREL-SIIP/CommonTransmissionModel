# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct Generator <: SwaggerModel
    bus::Any # spec type: Union{ Nothing, Int32 } # spec name: bus
    cost_pg_model::Any # spec type: Union{ Nothing, Int32 } # spec name: cost_pg_model
    cost_pg_parameters::Any # spec type: Union{ Nothing, Vector{Float32} } # spec name: cost_pg_parameters
    cost_start_cold::Any # spec type: Union{ Nothing, Float32 } # spec name: cost_start_cold
    cost_start_hot::Any # spec type: Union{ Nothing, Float32 } # spec name: cost_start_hot
    cost_start_warm::Any # spec type: Union{ Nothing, Float32 } # spec name: cost_start_warm
    down_time::Any # spec type: Union{ Nothing, Float32 } # spec name: down_time
    fuel_type::Any # spec type: Union{ Nothing, Int32 } # spec name: fuel_type
    index::Any # spec type: Union{ Nothing, Int32 } # spec name: index
    max_run::Any # spec type: Union{ Nothing, Float32 } # spec name: max_run
    min_down::Any # spec type: Union{ Nothing, Float32 } # spec name: min_down
    min_run::Any # spec type: Union{ Nothing, Float32 } # spec name: min_run
    must_run::Any # spec type: Union{ Nothing, Int32 } # spec name: must_run
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    pg::Any # spec type: Union{ Nothing, Float32 } # spec name: pg
    pg_0::Any # spec type: Union{ Nothing, Float32 } # spec name: pg_0
    pg_lb::Any # spec type: Union{ Nothing, Float32 } # spec name: pg_lb
    pg_ub::Any # spec type: Union{ Nothing, Float32 } # spec name: pg_ub
    pgd_lb::Any # spec type: Union{ Nothing, Float32 } # spec name: pgd_lb
    pgd_ub::Any # spec type: Union{ Nothing, Float32 } # spec name: pgd_ub
    qg::Any # spec type: Union{ Nothing, Float32 } # spec name: qg
    qg_lb::Any # spec type: Union{ Nothing, Float32 } # spec name: qg_lb
    qg_ub::Any # spec type: Union{ Nothing, Float32 } # spec name: qg_ub
    reserve_agc::Any # spec type: Union{ Nothing, Bool } # spec name: reserve_agc
    reserve_agc_pg_lb::Any # spec type: Union{ Nothing, Float32 } # spec name: reserve_agc_pg_lb
    reserve_agc_pg_ub::Any # spec type: Union{ Nothing, Float32 } # spec name: reserve_agc_pg_ub
    service_on::Any # spec type: Union{ Nothing, Bool } # spec name: service_on
    status::Any # spec type: Union{ Nothing, Int32 } # spec name: status
    time_start_cold::Any # spec type: Union{ Nothing, Float32 } # spec name: time_start_cold
    time_start_hot::Any # spec type: Union{ Nothing, Float32 } # spec name: time_start_hot
    time_start_warm::Any # spec type: Union{ Nothing, Float32 } # spec name: time_start_warm
    up_time::Any # spec type: Union{ Nothing, Float32 } # spec name: up_time

    function Generator(;bus=nothing, cost_pg_model=nothing, cost_pg_parameters=nothing, cost_start_cold=nothing, cost_start_hot=nothing, cost_start_warm=nothing, down_time=nothing, fuel_type=nothing, index=nothing, max_run=nothing, min_down=nothing, min_run=nothing, must_run=nothing, name=nothing, pg=nothing, pg_0=nothing, pg_lb=nothing, pg_ub=nothing, pgd_lb=nothing, pgd_ub=nothing, qg=nothing, qg_lb=nothing, qg_ub=nothing, reserve_agc=nothing, reserve_agc_pg_lb=nothing, reserve_agc_pg_ub=nothing, service_on=nothing, status=nothing, time_start_cold=nothing, time_start_hot=nothing, time_start_warm=nothing, up_time=nothing)
        o = new()
        validate_property(Generator, Symbol("bus"), bus)
        setfield!(o, Symbol("bus"), bus)
        validate_property(Generator, Symbol("cost_pg_model"), cost_pg_model)
        setfield!(o, Symbol("cost_pg_model"), cost_pg_model)
        validate_property(Generator, Symbol("cost_pg_parameters"), cost_pg_parameters)
        setfield!(o, Symbol("cost_pg_parameters"), cost_pg_parameters)
        validate_property(Generator, Symbol("cost_start_cold"), cost_start_cold)
        setfield!(o, Symbol("cost_start_cold"), cost_start_cold)
        validate_property(Generator, Symbol("cost_start_hot"), cost_start_hot)
        setfield!(o, Symbol("cost_start_hot"), cost_start_hot)
        validate_property(Generator, Symbol("cost_start_warm"), cost_start_warm)
        setfield!(o, Symbol("cost_start_warm"), cost_start_warm)
        validate_property(Generator, Symbol("down_time"), down_time)
        setfield!(o, Symbol("down_time"), down_time)
        validate_property(Generator, Symbol("fuel_type"), fuel_type)
        setfield!(o, Symbol("fuel_type"), fuel_type)
        validate_property(Generator, Symbol("index"), index)
        setfield!(o, Symbol("index"), index)
        validate_property(Generator, Symbol("max_run"), max_run)
        setfield!(o, Symbol("max_run"), max_run)
        validate_property(Generator, Symbol("min_down"), min_down)
        setfield!(o, Symbol("min_down"), min_down)
        validate_property(Generator, Symbol("min_run"), min_run)
        setfield!(o, Symbol("min_run"), min_run)
        validate_property(Generator, Symbol("must_run"), must_run)
        setfield!(o, Symbol("must_run"), must_run)
        validate_property(Generator, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(Generator, Symbol("pg"), pg)
        setfield!(o, Symbol("pg"), pg)
        validate_property(Generator, Symbol("pg_0"), pg_0)
        setfield!(o, Symbol("pg_0"), pg_0)
        validate_property(Generator, Symbol("pg_lb"), pg_lb)
        setfield!(o, Symbol("pg_lb"), pg_lb)
        validate_property(Generator, Symbol("pg_ub"), pg_ub)
        setfield!(o, Symbol("pg_ub"), pg_ub)
        validate_property(Generator, Symbol("pgd_lb"), pgd_lb)
        setfield!(o, Symbol("pgd_lb"), pgd_lb)
        validate_property(Generator, Symbol("pgd_ub"), pgd_ub)
        setfield!(o, Symbol("pgd_ub"), pgd_ub)
        validate_property(Generator, Symbol("qg"), qg)
        setfield!(o, Symbol("qg"), qg)
        validate_property(Generator, Symbol("qg_lb"), qg_lb)
        setfield!(o, Symbol("qg_lb"), qg_lb)
        validate_property(Generator, Symbol("qg_ub"), qg_ub)
        setfield!(o, Symbol("qg_ub"), qg_ub)
        validate_property(Generator, Symbol("reserve_agc"), reserve_agc)
        setfield!(o, Symbol("reserve_agc"), reserve_agc)
        validate_property(Generator, Symbol("reserve_agc_pg_lb"), reserve_agc_pg_lb)
        setfield!(o, Symbol("reserve_agc_pg_lb"), reserve_agc_pg_lb)
        validate_property(Generator, Symbol("reserve_agc_pg_ub"), reserve_agc_pg_ub)
        setfield!(o, Symbol("reserve_agc_pg_ub"), reserve_agc_pg_ub)
        validate_property(Generator, Symbol("service_on"), service_on)
        setfield!(o, Symbol("service_on"), service_on)
        validate_property(Generator, Symbol("status"), status)
        setfield!(o, Symbol("status"), status)
        validate_property(Generator, Symbol("time_start_cold"), time_start_cold)
        setfield!(o, Symbol("time_start_cold"), time_start_cold)
        validate_property(Generator, Symbol("time_start_hot"), time_start_hot)
        setfield!(o, Symbol("time_start_hot"), time_start_hot)
        validate_property(Generator, Symbol("time_start_warm"), time_start_warm)
        setfield!(o, Symbol("time_start_warm"), time_start_warm)
        validate_property(Generator, Symbol("up_time"), up_time)
        setfield!(o, Symbol("up_time"), up_time)
        o
    end
end # type Generator

const _property_map_Generator = Dict{Symbol,Symbol}(Symbol("bus")=>Symbol("bus"), Symbol("cost_pg_model")=>Symbol("cost_pg_model"), Symbol("cost_pg_parameters")=>Symbol("cost_pg_parameters"), Symbol("cost_start_cold")=>Symbol("cost_start_cold"), Symbol("cost_start_hot")=>Symbol("cost_start_hot"), Symbol("cost_start_warm")=>Symbol("cost_start_warm"), Symbol("down_time")=>Symbol("down_time"), Symbol("fuel_type")=>Symbol("fuel_type"), Symbol("index")=>Symbol("index"), Symbol("max_run")=>Symbol("max_run"), Symbol("min_down")=>Symbol("min_down"), Symbol("min_run")=>Symbol("min_run"), Symbol("must_run")=>Symbol("must_run"), Symbol("name")=>Symbol("name"), Symbol("pg")=>Symbol("pg"), Symbol("pg_0")=>Symbol("pg_0"), Symbol("pg_lb")=>Symbol("pg_lb"), Symbol("pg_ub")=>Symbol("pg_ub"), Symbol("pgd_lb")=>Symbol("pgd_lb"), Symbol("pgd_ub")=>Symbol("pgd_ub"), Symbol("qg")=>Symbol("qg"), Symbol("qg_lb")=>Symbol("qg_lb"), Symbol("qg_ub")=>Symbol("qg_ub"), Symbol("reserve_agc")=>Symbol("reserve_agc"), Symbol("reserve_agc_pg_lb")=>Symbol("reserve_agc_pg_lb"), Symbol("reserve_agc_pg_ub")=>Symbol("reserve_agc_pg_ub"), Symbol("service_on")=>Symbol("service_on"), Symbol("status")=>Symbol("status"), Symbol("time_start_cold")=>Symbol("time_start_cold"), Symbol("time_start_hot")=>Symbol("time_start_hot"), Symbol("time_start_warm")=>Symbol("time_start_warm"), Symbol("up_time")=>Symbol("up_time"))
const _property_types_Generator = Dict{Symbol,String}(Symbol("bus")=>"Int32", Symbol("cost_pg_model")=>"Int32", Symbol("cost_pg_parameters")=>"Vector{Float32}", Symbol("cost_start_cold")=>"Float32", Symbol("cost_start_hot")=>"Float32", Symbol("cost_start_warm")=>"Float32", Symbol("down_time")=>"Float32", Symbol("fuel_type")=>"Int32", Symbol("index")=>"Int32", Symbol("max_run")=>"Float32", Symbol("min_down")=>"Float32", Symbol("min_run")=>"Float32", Symbol("must_run")=>"Int32", Symbol("name")=>"String", Symbol("pg")=>"Float32", Symbol("pg_0")=>"Float32", Symbol("pg_lb")=>"Float32", Symbol("pg_ub")=>"Float32", Symbol("pgd_lb")=>"Float32", Symbol("pgd_ub")=>"Float32", Symbol("qg")=>"Float32", Symbol("qg_lb")=>"Float32", Symbol("qg_ub")=>"Float32", Symbol("reserve_agc")=>"Bool", Symbol("reserve_agc_pg_lb")=>"Float32", Symbol("reserve_agc_pg_ub")=>"Float32", Symbol("service_on")=>"Bool", Symbol("status")=>"Int32", Symbol("time_start_cold")=>"Float32", Symbol("time_start_hot")=>"Float32", Symbol("time_start_warm")=>"Float32", Symbol("up_time")=>"Float32")
Base.propertynames(::Type{ Generator }) = collect(keys(_property_map_Generator))
Swagger.property_type(::Type{ Generator }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Generator[name]))}
Swagger.field_name(::Type{ Generator }, property_name::Symbol) =  _property_map_Generator[property_name]

function check_required(o::Generator)
    (getproperty(o, Symbol("bus")) === nothing) && (return false)
    (getproperty(o, Symbol("index")) === nothing) && (return false)
    (getproperty(o, Symbol("pg")) === nothing) && (return false)
    (getproperty(o, Symbol("qg")) === nothing) && (return false)
    (getproperty(o, Symbol("status")) === nothing) && (return false)
    true
end

function validate_property(::Type{ Generator }, name::Symbol, val)
end
