# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct Bus <: SwaggerModel
    area::Any # spec type: Union{ Nothing, Int32 } # spec name: area
    base_kv::Any # spec type: Union{ Nothing, Float32 } # spec name: base_kv
    index::Any # spec type: Union{ Nothing, Int32 } # spec name: index
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    status::Any # spec type: Union{ Nothing, Int32 } # spec name: status
    type::Any # spec type: Union{ Nothing, Int32 } # spec name: type
    va::Any # spec type: Union{ Nothing, Float32 } # spec name: va
    vm::Any # spec type: Union{ Nothing, Float32 } # spec name: vm
    vm_lb::Any # spec type: Union{ Nothing, Float32 } # spec name: vm_lb
    vm_ub::Any # spec type: Union{ Nothing, Float32 } # spec name: vm_ub
    zone::Any # spec type: Union{ Nothing, Int32 } # spec name: zone

    function Bus(;area=nothing, base_kv=nothing, index=nothing, name=nothing, status=nothing, type=nothing, va=nothing, vm=nothing, vm_lb=nothing, vm_ub=nothing, zone=nothing)
        o = new()
        validate_property(Bus, Symbol("area"), area)
        setfield!(o, Symbol("area"), area)
        validate_property(Bus, Symbol("base_kv"), base_kv)
        setfield!(o, Symbol("base_kv"), base_kv)
        validate_property(Bus, Symbol("index"), index)
        setfield!(o, Symbol("index"), index)
        validate_property(Bus, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(Bus, Symbol("status"), status)
        setfield!(o, Symbol("status"), status)
        validate_property(Bus, Symbol("type"), type)
        setfield!(o, Symbol("type"), type)
        validate_property(Bus, Symbol("va"), va)
        setfield!(o, Symbol("va"), va)
        validate_property(Bus, Symbol("vm"), vm)
        setfield!(o, Symbol("vm"), vm)
        validate_property(Bus, Symbol("vm_lb"), vm_lb)
        setfield!(o, Symbol("vm_lb"), vm_lb)
        validate_property(Bus, Symbol("vm_ub"), vm_ub)
        setfield!(o, Symbol("vm_ub"), vm_ub)
        validate_property(Bus, Symbol("zone"), zone)
        setfield!(o, Symbol("zone"), zone)
        o
    end
end # type Bus

const _property_map_Bus = Dict{Symbol,Symbol}(Symbol("area")=>Symbol("area"), Symbol("base_kv")=>Symbol("base_kv"), Symbol("index")=>Symbol("index"), Symbol("name")=>Symbol("name"), Symbol("status")=>Symbol("status"), Symbol("type")=>Symbol("type"), Symbol("va")=>Symbol("va"), Symbol("vm")=>Symbol("vm"), Symbol("vm_lb")=>Symbol("vm_lb"), Symbol("vm_ub")=>Symbol("vm_ub"), Symbol("zone")=>Symbol("zone"))
const _property_types_Bus = Dict{Symbol,String}(Symbol("area")=>"Int32", Symbol("base_kv")=>"Float32", Symbol("index")=>"Int32", Symbol("name")=>"String", Symbol("status")=>"Int32", Symbol("type")=>"Int32", Symbol("va")=>"Float32", Symbol("vm")=>"Float32", Symbol("vm_lb")=>"Float32", Symbol("vm_ub")=>"Float32", Symbol("zone")=>"Int32")
Base.propertynames(::Type{ Bus }) = collect(keys(_property_map_Bus))
Swagger.property_type(::Type{ Bus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Bus[name]))}
Swagger.field_name(::Type{ Bus }, property_name::Symbol) =  _property_map_Bus[property_name]

function check_required(o::Bus)
    (getproperty(o, Symbol("base_kv")) === nothing) && (return false)
    (getproperty(o, Symbol("index")) === nothing) && (return false)
    (getproperty(o, Symbol("status")) === nothing) && (return false)
    (getproperty(o, Symbol("va")) === nothing) && (return false)
    (getproperty(o, Symbol("vm")) === nothing) && (return false)
    true
end

function validate_property(::Type{ Bus }, name::Symbol, val)
end
