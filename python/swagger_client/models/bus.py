# coding: utf-8

"""
    Buses API

    Manage buses in the system  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: daniel.thom@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Bus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'area': 'int',
        'base_kv': 'float',
        'index': 'int',
        'name': 'str',
        'status': 'int',
        'type': 'int',
        'va': 'float',
        'vm': 'float',
        'vm_lb': 'float',
        'vm_ub': 'float',
        'zone': 'int'
    }

    attribute_map = {
        'area': 'area',
        'base_kv': 'base_kv',
        'index': 'index',
        'name': 'name',
        'status': 'status',
        'type': 'type',
        'va': 'va',
        'vm': 'vm',
        'vm_lb': 'vm_lb',
        'vm_ub': 'vm_ub',
        'zone': 'zone'
    }

    def __init__(self, area=None, base_kv=None, index=None, name=None, status=None, type=None, va=None, vm=None, vm_lb=None, vm_ub=None, zone=None, _configuration=None):  # noqa: E501
        """Bus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._area = None
        self._base_kv = None
        self._index = None
        self._name = None
        self._status = None
        self._type = None
        self._va = None
        self._vm = None
        self._vm_lb = None
        self._vm_ub = None
        self._zone = None
        self.discriminator = None

        if area is not None:
            self.area = area
        self.base_kv = base_kv
        self.index = index
        if name is not None:
            self.name = name
        self.status = status
        if type is not None:
            self.type = type
        self.va = va
        self.vm = vm
        if vm_lb is not None:
            self.vm_lb = vm_lb
        if vm_ub is not None:
            self.vm_ub = vm_ub
        if zone is not None:
            self.zone = zone

    @property
    def area(self):
        """Gets the area of this Bus.  # noqa: E501

        assigned control area  # noqa: E501

        :return: The area of this Bus.  # noqa: E501
        :rtype: int
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this Bus.

        assigned control area  # noqa: E501

        :param area: The area of this Bus.  # noqa: E501
        :type: int
        """

        self._area = area

    @property
    def base_kv(self):
        """Gets the base_kv of this Bus.  # noqa: E501

        base voltage  # noqa: E501

        :return: The base_kv of this Bus.  # noqa: E501
        :rtype: float
        """
        return self._base_kv

    @base_kv.setter
    def base_kv(self, base_kv):
        """Sets the base_kv of this Bus.

        base voltage  # noqa: E501

        :param base_kv: The base_kv of this Bus.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and base_kv is None:
            raise ValueError("Invalid value for `base_kv`, must not be `None`")  # noqa: E501

        self._base_kv = base_kv

    @property
    def index(self):
        """Gets the index of this Bus.  # noqa: E501

        a unique identifier for components  # noqa: E501

        :return: The index of this Bus.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this Bus.

        a unique identifier for components  # noqa: E501

        :param index: The index of this Bus.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501

        self._index = index

    @property
    def name(self):
        """Gets the name of this Bus.  # noqa: E501

        a flexible name for components, non required to be unique  # noqa: E501

        :return: The name of this Bus.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Bus.

        a flexible name for components, non required to be unique  # noqa: E501

        :param name: The name of this Bus.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this Bus.  # noqa: E501

        a 0/1 value indicating if the component should be omitted or not (0 => omitted)  # noqa: E501

        :return: The status of this Bus.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Bus.

        a 0/1 value indicating if the component should be omitted or not (0 => omitted)  # noqa: E501

        :param status: The status of this Bus.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def type(self):
        """Gets the type of this Bus.  # noqa: E501

        bus type for power flow (1=PQ, 2=PV, 3=Slack)  # noqa: E501

        :return: The type of this Bus.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Bus.

        bus type for power flow (1=PQ, 2=PV, 3=Slack)  # noqa: E501

        :param type: The type of this Bus.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def va(self):
        """Gets the va of this Bus.  # noqa: E501

        voltage angle  # noqa: E501

        :return: The va of this Bus.  # noqa: E501
        :rtype: float
        """
        return self._va

    @va.setter
    def va(self, va):
        """Sets the va of this Bus.

        voltage angle  # noqa: E501

        :param va: The va of this Bus.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and va is None:
            raise ValueError("Invalid value for `va`, must not be `None`")  # noqa: E501

        self._va = va

    @property
    def vm(self):
        """Gets the vm of this Bus.  # noqa: E501

        voltage magnitude  # noqa: E501

        :return: The vm of this Bus.  # noqa: E501
        :rtype: float
        """
        return self._vm

    @vm.setter
    def vm(self, vm):
        """Sets the vm of this Bus.

        voltage magnitude  # noqa: E501

        :param vm: The vm of this Bus.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and vm is None:
            raise ValueError("Invalid value for `vm`, must not be `None`")  # noqa: E501

        self._vm = vm

    @property
    def vm_lb(self):
        """Gets the vm_lb of this Bus.  # noqa: E501

        a lower limit on voltage magnitude  # noqa: E501

        :return: The vm_lb of this Bus.  # noqa: E501
        :rtype: float
        """
        return self._vm_lb

    @vm_lb.setter
    def vm_lb(self, vm_lb):
        """Sets the vm_lb of this Bus.

        a lower limit on voltage magnitude  # noqa: E501

        :param vm_lb: The vm_lb of this Bus.  # noqa: E501
        :type: float
        """

        self._vm_lb = vm_lb

    @property
    def vm_ub(self):
        """Gets the vm_ub of this Bus.  # noqa: E501

        an upper limit on voltage magnitude  # noqa: E501

        :return: The vm_ub of this Bus.  # noqa: E501
        :rtype: float
        """
        return self._vm_ub

    @vm_ub.setter
    def vm_ub(self, vm_ub):
        """Sets the vm_ub of this Bus.

        an upper limit on voltage magnitude  # noqa: E501

        :param vm_ub: The vm_ub of this Bus.  # noqa: E501
        :type: float
        """

        self._vm_ub = vm_ub

    @property
    def zone(self):
        """Gets the zone of this Bus.  # noqa: E501

        assigned control zone  # noqa: E501

        :return: The zone of this Bus.  # noqa: E501
        :rtype: int
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this Bus.

        assigned control zone  # noqa: E501

        :param zone: The zone of this Bus.  # noqa: E501
        :type: int
        """

        self._zone = zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Bus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Bus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Bus):
            return True

        return self.to_dict() != other.to_dict()
